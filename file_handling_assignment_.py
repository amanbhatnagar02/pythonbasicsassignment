# -*- coding: utf-8 -*-
"""file handling assignment .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GGlPCJYQ1Q_21VnzZ8-etF2QYlX0-yfB

# file handling

# theory questions :

#Q1: What is the difference between interpreted and compiled languages

ans: In compiled languages, the source code is translated into machine code (binary code) by a compiler before the program is run.
In interpreted languages, the source code is translated and executed line by line by an interpreter at runtime.

# Q2 : What is exception handling in Python

ans: expection generally means a interuption in an event. expection handling means handling the error gracefully also to ensure that the rest of code gets executed .

#Q3:What is the purpose of the finally block in exception handling

ans: finally block is the block which irrespective of any other block it will always work.

#Q4: What is logging in Python

ans: Logging in Python is a built-in module that allows you to track and record events or messages in your code, which is helpful for debugging, monitoring, and maintaining your applications.

#Q5:What is the significance of the __del__ method in Python

ans: The __del__ method in Python is a destructor method that is called when an object is about to be destroyed.

#Q6:What is the difference between import and from ... import in Python

ans: import and from import  both in python is use to import external code . import statement is used to call a whole module whereas from import used to call a specific variable ,function from a module

#Q7: How can you handle multiple exceptions in Python

ans: we can  handle multiple exception as writing multiple exception block or writing exceptionn in same block . for example : value error or zerodivision.

#Q8: What is the purpose of the with statement when handling files in Python

ans : with statement is used to close the file autometically and smoothly work with file handling .

#Q9: What is the difference between multithreading and multiprocessing

both are used to perform multiple task . multithreading is like dividing the process in multiple thread in single core whereras multiprocess uses multi core or multi processsor to complete the task . multithread is concurrent process and mutithreading is parallel process.

#Q10: What are the advantages of using logging in a program

logging has many advantage of tracking the behaviour of the application . it allow to record message of various severity, such as debug ,info,warning,error and critical. This helps to capture detailed information about the execution of the program at different stages, from normal operation to critical errors.

#Q11:What is memory management in Python

this is not done in the class

#Q12: What are the basic steps involved in exception handling in Python

ans : basic steps involved in exception handling is
1. try block (try to catch error)
2.except block (show error once error is caught)
3.finally block (this code will run always irrespect of try or except block )

#Q13: Why is memory management important in Python

ans:Memory management is a critical aspect of any programming language, including Python, because it directly impacts the performance, efficiency, and stability of a program.

#Q14:What is the role of try and except in exception handling

ans: try and except in exception handling is to try the code inside the try block and except block raise the error message , error message can be customize or can be default message .

#Q15: How does Python's garbage collection system work

ans:this is not done in the class

#Q16: What is the purpose of the else block in exception handling

ans: The else block in exception handling in Python serves to execute code that should run only when no exceptions are raised in the try block. It allows you to specify a set of operations that should be performed if the code in the try block succeeds without any errors

#Q17: What are the common logging levels in Python

In Python, the logging module provides several built-in logging levels to indicate the severity or importance of the messages being logged. These levels allow developers to categorize logs based on their significance, helping to filter and manage logs more effectively.some steps are : 1.debug 2.info 3.warning 4.error 5.critical

#Q18: What is the difference between os.fork() and multiprocessing in Python

In Python, both os.fork() and the multiprocessing module are used to create and manage multiple processes, but they operate differently and have different use cases.

#Q19: What is the importance of closing a file in Python

ans: Closing a file in Python is an important step when working with file handling. It ensures proper resource management and can help avoid various issues such as data loss, memory leaks, and file corruption.

#Q20 What is the difference between file.read() and file.readline() in Python

ans:in Python, file.read() and file.readline() are both methods used to read the contents of a file, but they behave differently. Here are the key differences:
1.The read() method is used to read the entire content of the file at once.
2.The readline() method reads one line from the file at a time.

#Q21: What is the logging module in Python used for

ans:The logging module in Python is used for generating log messages from your program. It provides a flexible framework for adding logging functionality to your applications, allowing you to record various events, errors, or informational messages that happen during the execution of your program.

#Q22:What is the os module in Python used for in file handling

ans:The os module in Python provides a way of interacting with the operating system and allows you to perform various file and directory operations.

#Q23:What are the challenges associated with memory management in Python

ans: Memory management in Python, although highly automated, still poses several challenges. These challenges arise due to the dynamic nature of the language, the underlying implementation of Python (CPython, the standard Python interpreter),

#Q24:  How do you raise an exception manually in Python

ans:To raise an exception manually in Python, you use the raise statement. You can raise both built-in and custom exceptions, which allows you to control error flow and handle specific conditions in your program.

#Q25: Why is it important to use multithreading in certain applications?

ans:Multithreading is an important concept in programming, and it becomes crucial in certain applications for several reasons. It allows for concurrent execution, which can significantly improve the performance and responsiveness of an application, especially in cases where there are multiple tasks that can be performed independently.

# practical question

# Q1 How can you open a file for writing in Python and write a string to it ?
"""

file = open( "file.txt","w")
file.write(" hello friend")

"""# Q2 Write a Python program to read the contents of a file and print each line?"""

f = open("file.txt","r")
f.seek(0)
print(f.read())
f.close()

"""# Q3 How would you handle a case where the file doesn't exist while trying to open it for reading"""

try:
    with open("non_existent_file.txt", "r") as file:
        content = file.read()
        print(content)
except Exception as e :
    print("The file does not exist.",e)

"""# Q4 Write a Python script that reads from one file and writes its content to another file"""

# Open the source file in read mode and the target file in write mode
with open('source_file.txt', 'r') as source_file:
    content = source_file.read()  # Read the content of the source file

with open('target_file.txt', 'w') as target_file:
    target_file.write(content)  # Write the content to the target file

"""#Q5  How would you catch and handle division by zero error in Python"""

try :
  5/0
except ZeroDivisionError as e :
  print("since the divisor is 0 , the default value i 1 and quotient is " ,10/1)

"""#Q6  Write a Python program that logs an error message to a log file when a division by zero exception occurs."""

import logging
logging.basicConfig(filename= "programme_file",level = logging.DEBUG)

try :
  10/0
except ZeroDivisionError as e :
  logging.error(f" this is the error {e}")

"""#Q7 How do you log information at different levels (INFO, ERROR, WARNING) in Python using the logging module

"""

import logging


logging.basicConfig(
    filename='app.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


logging.debug("This is a debug message.")
logging.info("This is an informational message.")
logging.warning("This is a warning message.")
logging.error("This is an error message.")
logging.critical("This is a critical message.")

print("Log messages have been written to 'app.log'.")

"""#Q8  Write a program to handle a file opening error using exception handling"""

try :
  with open( "open_demo_file","r"):
   f.read()
except FileNotFoundError as e :
  print("this is the error  ",e)
except Exception as e :
  print("any other error ",e)

"""#Q9 How can you read a file line by line and store its content in a list in Python"""

def read_file_lines(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()

        lines = [line.strip() for line in lines]
        return lines
    except FileNotFoundError:
        print(f"Error: The file '{file_path}' does not exist.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


file_path = 'example.txt'
lines = read_file_lines(file_path)
if lines:
    print("File content stored in the list:")
    print(lines)

"""#Q10 How can you append data to an existing file in Python"""

with open("file_example.txt","a") as file :
  data = "hello friend"
  file.write(data)

"""#Q11  Write a Python program that uses a try-except block to handle an error when attempting to access a dictionary key that doesn't exist"""

try :
  d = {"name ": "aman","class":"12","role":"data analylst "}
  print(d["age"])
except KeyError as e :
  print("this key not found ", e )

"""# Q12 How can you read a file line by line and store its content in a list in Python"""

try:
  10/"3"
  f = open("thisis.txt","r")
  f.read()
  10/0

except ZeroDivisionError as e:
  print("this is error",e)
except FileNotFoundError as e :
  print("this is error",e)
except TypeError as e :
  print("this is error",e)

"""# Q13 How would you check if a file exists before attempting to read it in Python

"""

import os

def read_file_if_exists(file_path):
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r') as file:
                content = file.read()
                print("File content:")
                print(content)
        except Exception as e:
            print(f"An error occurred while reading the file: {e}")
    else:
        print(f"Error: The file '{file_path}' does not exist.")


file_path = 'example.txt'
read_file_if_exists(file_path)

"""# Q14 Write a program that uses the logging module to log both informational and error messages"""

import logging


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)


logging.info('This is an informational message.')


try:
    1 / 0
except ZeroDivisionError:
    logging.error('An error occurred: Division by zero.')


logging.warning('This is a warning message.')


logging.debug('This is a debug message.')


logging.critical('This is a critical error!')

"""#Q15 Write a Python program that prints the content of a file and handles the case when the file is empty"""

def print_file_content(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()


            if not content:
                print("The file is empty.")
            else:
                print("File Content:")
                print(content)

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' does not exist.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


file_path = 'example.txt'
print_file_content(file_path)

"""#Q16  Demonstrate how to use memory profiling to check the memory usage of a small program

ans : this is not done in the class

#Q17 Write a Python program to create and write a list of numbers to a file, one number per line
"""

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

with open('numbers.txt', 'w') as file:

    for number in numbers:
        file.write(f"{number}\n")

print("Numbers have been written to 'numbers.txt'.")

"""#Q18 How would you implement a basic logging setup that logs to a file with rotation after 1MB

ans : this is not done in the class

#Q19 Write a program that handles both IndexError and KeyError using a try-except block
"""

try:

   my_dict= {"name": "aman", "age": 22 , "job":"data analytics"}
   my_dict1 = ["aman","ajay","arun"]
   print(my_dict["salary"])
   print(my_dict1[5])

  except (KeyError,IndexError) as e :
    print("this key not found ", e )

"""# Q20  How would you open a file and read its contents using a context manager in Python"""

try:
 with open("demo_file.txt", 'r') as file:
    contents = file.read()
 print(contents)
except FileNotFoundError:
 print("File not found.")
except Exception as e:
 print(f"An error occurred: {e}")

"""# Q21 Write a Python program that reads a file and prints the number of occurrences of a specific word"""

with open ("example_demo.txt","w") as file :
  file.write("python is a very useful and easy language. Python is easy!")


def count_word(filename,word):
  try:
    with open(filename , "r") as file :
      text = file.read().lower()
      words = text.split()
      words_count = words.count(word.lower())
      print ( f"the word {word} occurs {words_count} times in the file.")

  except FileNotFoundError:
    print(f"Error: The file '{filename}' does not exist.")
  except Exception as e:
    print(f"An unexpected error occurred: {e}")


filename = "example_demo.txt"
word = "python"
count_word(filename,word)

"""#Q22 How can you check if a file is empty before attempting to read its contents"""

this is not done in the class

"""# Q23 Write a Python program that writes to a log file when an error occurs during file handling."""

import logging
logging.basicConfig(filename = "demo_file.log", level = logging.ERROR,format = '%(message)s',)

try :
    f= open("demo_file.txt","r")
    f.read()
except FileNotFoundError as e :
    logging.error(f"this is the error{e}")