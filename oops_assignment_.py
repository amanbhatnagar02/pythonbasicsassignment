# -*- coding: utf-8 -*-
"""oops assignment .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ilUKMIgXFZbY1VVcAP_tkrAl6NwI83kq

Question 1 : What is Object-Oriented Programming (OOP)

Answer 1 : OOP is a way to organize a code in a right and managable manner with the functions like inheritence , polymorphosis , abstraction and encapsulation.

Question 2: What is a class in OOP

Answer 2 : class is a template inside a oop which is used to create a object . class contain attribute and behaviour inside it .

Question 3 : What is an object in OOP

Answer 3 : object is like an entity or  a real worl d object create with the attribute and behaviour inside the class of which it is created.

Question 4 :What is the difference between abstraction and encapsulation

Answer 4 : Abstraction means hiding the data and making the abstract method and abstract class to use them in subclasses to define the function , which basically means to hide the uncessary code . encapsulation is done to protect some data from public access by making them private.

Question 5 :What are dunder methods in Python

Answer 5 :  Dunder basically means Double underscore , this are some special method which are built in inside python class and used to create custom object .

Question 6 : Explain the concept of inheritance in OOP

Answer 6 : Inheritence is simple words is when child class can access or modify the variable of its parent class .

Question 7 : What is polymorphism in OOP

Answer 7 : polymorphism  is same function name but with diffrent type of argument and different number of argument .  polymorphism work with two method method overridding and method overloading

Question 8 :How is encapsulation achieved in Python

Answer 8 : encapsulation means enclosing or hiding something it can be achieved with dot underscore(classname)underscore,underscore(element)

Question 9 :  What is a constructor in Python

Answer 9 : In Python, a constructor is a special method used to initialize a newly created object. It is automatically called when an object of a class is instantiated. Constructors are used to set up the initial state of an object by initializing its attributes with default or provided values.

Question 10 : What are class and static methods in Python

Answer 10   : class method are used with @ classmethod decorator and they are bound to class they are mainely used when we use class variable . static method are also decorated with @ staticmethod decorator and are not bound to class they work like a simple method inside a class.

Question 11 : What is method overloading in Python

Answer 11 :method overloading is when we pass different type or different number of parameter in method with same name but we cant do this is python so we use default value and loop method to achieve it in pyhton.

Question 12 : What is method overriding in OOP

Answer 12 :It is used inside the inhereitence where parent class and child class has function with same name but in child class that function will be overriding or perform according to the way it is defined inside the parent class .

Question 13 : What is a property decorator in Python

Answer 13 : it is used to call a method/function as an attribute without parenthesis, it can be used to get value and also to modify or set value by using setter .

Question 14 : Why is polymorphism important in OOP

Answer 14 : polymorphism means many form . it is important to write re-useable code and to single function with different type of data and different number of data. it can bw done by method overloading , method overridding and operator overloading .

Question 15 : What is an abstract class in Python

Answer  15 : abstract class is class which contain abstact method which are undefined but declared with the use of import abc module and @abstractmethod

Question 16 : What are the advantages of OOP

Answer 16 : Advantages of oops are to manage the code in organized way while working with frontend , backend or database

Question 17 :  What is the difference between a class variable and an instance variables

Answer 17 :  A class variable is a variable that is shared by all instances of the class. It is defined inside the class, but outside of any instance methods (i.e., outside the __init__ method). An instance variable is a variable that is specific to each instance of a class. It is defined inside the __init__ method (or any other method that uses self).

Question 18 :  What is multiple inheritance in Python

Answer 18 : one child class can have multiple inheritence of multiple parent class

Question 19 : Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python

Answer 19 : str is used to represent the object as string as user friendly string , more readable format. repr used to represent object in string method more developer undrestanding format

Question 20 : What is the significance of the ‘super()’ function in Python

Answer 20 :  super() is used to call method from a parent class

Question 21 : What is the significance of the __del__ method in Python

Answer 21 : del is used to delete any object/ instance created of a class

Question 22 :What is the difference between @staticmethod and @classmethod in Python

Answer 22 : class method are bound to class and can modify and access class variavle whereas static method is simple method inside a class and it cant access or modify the class variable

Question 23 :How does polymorphism work in Python with inheritance

Answer 23 : polymorphisis means same function with different number of  values and different type of data . with inherita=ence it is done with two methods 1) method overridding 2)method overloading

Question 24 : What is method chaining in Python OOP

Answer 24 : Method chaining is a technique where methods are called on the same object in a single line of code, which is possible because each method returns the object (self) after performing its action.

Question 25 : What is the purpose of the __call__ method in Python?

 Answer 25: call method is used to call the code inside it and it is used to organise the code.

------------------------CODING PRACTICLE QUESTIONS---------------------

question 1 :Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog
that overrides the speak() method to print "Bark!".
"""

class Animal:
  def speak (self):
    print ( "every animal barkes")
class dogs(Animal) :
  def speak(self):
    print(" barks")

dog1 = dogs()
dog1.speak()

"""Question 2 :  Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle
from it and implement the area() method in both.



"""

from abc import ABC , abstractmethod
import math
class Shape(ABC):
  @abstractmethod
  def area(self):
    pass

class Circle(Shape):
  def __init__(self,radius):
    self.radius = radius
  def area(self):
    return math.pi*self.radius**2


class Rectangle(Shape):
  def __init__(self,length,width):
    self.length = length
    self.width = width
  def area(self):
    return self.length*self.width

""" Question 3 :Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car
and further derive a class ElectricCar that adds a battery attribute.
"""

class Vehicle :
  def __init__ ( self, type ):
    self.type = type

  def display_info (self):
    print (f"Vehicle type : {self.type}")

class Car ( Vehicle ):
  def __init__( self,type,colour ):
    super().__init__(type)
    self.colour = colour

  def display_info (self):
    super().display_info()
    print (f"Car colour : {self.colour}")

class ElectricCar( Car  ):
  def __init__(self,type,colour,battery):
    super().__init__(type,colour)
    self.battery = battery

  def display_info (self):
    super().display_info()
    print (f"Car battery : {self.battery}")


electric_car = ElectricCar("Electric", "Tesla", 75)
electric_car.display_info()

""" Question 4 : Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes
balance and methods to deposit, withdraw, and check balance.

"""

class BankAccount :
  def __init__(self,balance):
    self.__balance = balance



  def deposit(self,amount):
    self.__balance += amount
    print(f"Deposited: ${amount}")

  def withdraw(self,amount):
    if amount <= self.__balance:
      self.__balance -= amount
      print(f"Withdrew: ${amount}")
    else:
      print("Insufficient balance")

  def check_balance(self):
    print(f"Current balance: ${self.__balance}")

account = BankAccount(1000)
account.deposit(500)
account.withdraw(200)
account.check_balance()

"""Question 6 :Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar
and Piano that implement their own version of play().
"""



"""Question 8 :implement a class Person with a class method to count the total number of persons created"""

class Person:
  total_person = 0
  def __init__(self,name):
    self.name = name

    Person.total_person = Person.total_person+ 1

person_name1 = Person("ram")
person_name2 = Person("ajay")
print(Person.total_person)

""" Write a class Fraction with attributes numerator and denominator. Override the str method to display the
fraction as "numerator/denominator"
"""

class Fraction :
    def __init__(self,numerator,denominator):
      self.numerator = numerator
      self.denominator = denominator

    def __str__(self):
       return f"{self.numerator}/{self.denominator}"

fraction = Fraction(4,7)
print(fraction)

"""Question :  Create a class MathOperations with a class method add_numbers() to add two numbers and a static
method subtract_numbers() to subtract two numbers.
"""

class MathOpertaion :
  @classmethod
  def add_numbers(cls,a,b):
    return a+b

  @staticmethod
  def subtract_numbers(a,b):
    return a-b

print(MathOpertaion.add_numbers(4,5))
print(MathOpertaion.subtract_numbers(5,1))

""" Question Demonstrate operator overloading by creating a class Vector and overriding the add method to add two
vectors.



"""

class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # Overloading the '+' operator to add two vectors
    def __add__(self, other):
        if isinstance(other, Vector):
            return Vector(self.x + other.x, self.y + other.y)
        else:
            raise ValueError("Operands must be of type 'Vector'")

    def __repr__(self):
        return f"Vector({self.x}, {self.y})"


vector1 = Vector(2, 3)
vector2 = Vector(4, 1)


result = vector1 + vector2

print(f"Result of adding vectors: {result}")

""" Create a class Person with attributes name and age. Add a method greet() that prints "Hello, my name is
{name} and I am {age} years old.
"""

class Person :
  def __init__(self, name ,age ):
    self.name = name
    self.age= age
  def greet (self):
    print(f"Hello, my name is {self.name} and I am {self.age} years old.")

person1 = Person("ram",20)
person1.greet()

""" Implement a class Student with attributes name and grades. Create a method average_grade() to compute
the average of the grades
"""

class Student :
  def __init__(self,name,grades):
    self.name = name
    self.grades = grades

  def average_grade(self):
    total = sum(self.grades)
    average = total/len(self.grades)
    return average

obj = Student("ram",[4,5,6,7])
obj.average_grade()

"""Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the
area.
"""

class Rectangle :
  def __init__(self,length,width):
    self.length = length
    self.width = width

  def set_dimensions(self,length,width):
    self.length = length
    self.width = width

  def area(self):
    return self.length * self.width

rectangle = Rectangle(5,8)
rectangle.area()
rectangle.set_dimensions(6,5)
rectangle.area()

""" Create a class Employee with a method calculate_salary() that computes the salary based on hours worked
and hourly rate. Create a derived class Manager that adds a bonus to the salary.
"""

class Employee :
  def __init__(self,name,hours_worked,hourly_rate):
    self.name = name
    self.hours_worked = hours_worked
    self.hourly_rate = hourly_rate

  def calculate_salary(self):
    return  (self.name ,self.hours_worked * self.hourly_rate)

emp1 = Employee("ram",4,5)
emp1.calculate_salary()

""" Create a class Product with attributes name, price, and quantity. Implement a method total_price() that
calculates the total price of the product.
"""

class Product :
  def __init__(self,name,price,quantity):
    self.name=name
    self.price=price
    self.quantity=quantity

  def total_price(self):
    return self.price *self.quantity

product1 = Product("iphone",20000 ,3)
product1.total_price()

""" Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that
implement the sound() method.
"""

from abc import ABC , abstractmethod
class Animal :
  @abstractmethod
  def sound(self):
    pass

class Cow(Animal):
  def sound(self):
    print("moo")

class Sheep(Animal):
  def sound(self):
    print("baa")

cow1 = Cow()
cow1.sound()

sheep1 = Sheep()
sheep1.sound()

"""Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that
returns a formatted string with the book's details.
"""

class Book:
    def __init__(self, title, author, year_published):
        self.title = title
        self.author = author
        self.year_published = year_published

    def get_book_info(self):
        return f"Title: {self.title}\nAuthor: {self.author}\nYear Published: {self.year_published}"

book1 = Book("The Alchemist", "Paulo Coelho", 1988)
print(book1.get_book_info())

""" Create a class House with attributes address and price. Create a derived class Mansion that adds an
attribute number_of_rooms.
"""

class House:
    def __init__(self, address, price):
        self.address = address
        self.price = price

class Mansion(House):
    def __init__(self, address, price, number_of_rooms=None):
        super().__init__(address, price)
        self.number_of_rooms = number_of_rooms

mansion1 = Mansion("123 Main St", 250000, 8)
print(mansion1.address)
print(mansion1.price)
print(mansion1.number_of_rooms)